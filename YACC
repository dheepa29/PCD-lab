LEX PART:
%{
#include<stdio.h>
#include "y.tab.h"
extern int yylval;
%}
%%
[0-9]+ {
 yylval=atoi(yytext);
 return NUMBER;
 }
[\t] ;
[\n] return 0;
. return yytext[0];
%%
int yywrap()
{
return 1;
}



YACC PART:
%{
 #include<stdio.h>
 int flag=0;
%}
%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'
%%
ArithmeticExpression: E{
 printf("\nResult=%d\n",$$);
 return 0;
 };
E:E'+'E {$$=$1+$3;}
|E'-'E {$$=$1-$3;}
|E'*'E {$$=$1*$3;}
|E'/'E {$$=$1/$3;}
|E'%'E {$$=$1%$3;}
|'('E')' {$$=$2;}
| NUMBER {$$=$1;}
;
%%
void main()
{
 printf("\nEnter Any Arithmetic Expression which can have operations Addition, Subtraction,
Multiplication, Divison, Modulus and Round brackets:\n");
 yyparse();
 if(flag==0)
 printf("\nEntered arithmetic expression is Valid\n\n");
}
void yyerror()
{
 printf("\nEntered arithmetic expression is Invalid\n\n");
 flag=1;
}



output:
C:\Users\18csec29\Desktop\Ex-4>yacc -d 4c.y
C:\Users\18csec29\Desktop\Ex-4>lex 4c.l
C:\Users\18csec29\Desktop\Ex-4>gcc lex.yy.c y. tab.c -w
C:\Users\18csec29\Desktop\Ex-4>./a.out
3*5+4
19.000000
